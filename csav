#!/bin/bash

# Configurable variables
# readonly config_checkout_path="$HOME"
# readonly repository_name="configs"
# readonly repository_url="https://github.com/<user_name>/$repository_name"
# readonly jump_terminal_command='alacritty --working-directory "$(config_root_path)" &'

print_error()
{
  echo "csav: $1"
}

config_root_path()
{
  echo "$config_checkout_path/$repository_name"
}

home_path()
{
  if [[ -n $SUDO_USER ]]
  then
    echo "/home/$SUDO_USER"
  else
    echo "$HOME"
  fi
}

resolve_path()
{
  if [[ $1 =~ ~* ]]
  then
    echo "$(echo "$1" | sed "s|~|$(home_path)|")"
    return 0
  fi
  
  echo "$1"
}

enforce_initialization()
{
  if [[ ! -d $(config_root_path)/.git ]]
  then
    print_error "init required, not a git repository: '$(config_root_path)'"
    echo "  use \"csav init\" to clone the repository"
    exit 1
  fi
}

access_config_git()
{
  git -C "$(config_root_path)" "$@"
}

help()
{
  # TODO Implement displaying usage.
  echo "help"
}

init()
{
  if [[ -d $(config_root_path)/.git ]]
  then
    echo "initialized"
    return 0
  fi

  mkdir -p "$(config_root_path)"

  if [[ $? -ne 0 ]]
  then
    print_error "directory creation failed -- '$(config_root_path)'"
    exit 1
  fi

  git clone "$repository_url" "$(config_root_path)"

  if [[ $? -ne 0 ]]
  then
    rm -rf "$(config_root_path)"
    print_error "repository cloning failed -- '$repository_url'"
    exit 1
  fi

  echo "initialized"
}

list()
{
  find "$(config_root_path)" -type f ! -path "*.git*" ! -path "*README.md" \
    | sed "s|"$(config_root_path)"||"
}

add()
{
  enforce_initialization

  for path in "$@"
  do
    path="$(resolve_path "$path")"
    cp -a --parent "$(realpath "$path")" "$(config_root_path)"
  done
  
  access_config_git add "*"
}

addcomm()
{
  add "$@"
  commit
}

apply()
{
  local destination_path="$1"

  if [[ -z "$destination_path" ]]
  then
    print_error "destination path must be supplied"
    exit 1
  fi

  enforce_initialization
  cd "$(config_root_path)"

  for saved_item in $(ls -A | grep -v -e '.git' -e 'README.md')
  do
    cp -a "$saved_item" "$destination_path"
  done
}

restore()
{
  enforce_initialization
  access_config_git restore --staged "*"
  access_config_git clean -dfx
}

commit()
{
  enforce_initialization
  access_config_git commit -m "$(date)"
}

pull()
{
  enforce_initialization
  access_config_git pull
}

push()
{
  enforce_initialization
  access_config_git push
}

status()
{
  enforce_initialization
  access_config_git status
}

diff()
{
  enforce_initialization
  access_config_git diff "$@"
}

jump()
{
  enforce_initialization

  if [[ -z $jump_terminal_command ]]
  then
    print_error "can not jump to '$(config_root_path)', 'jump_terminal_command' variable must be set"
    exit 1
  fi

  eval "$jump_terminal_command"
}

if [[ -z $config_checkout_path ]]
then
  print_error "'config_checkout_path' variable must be set"
  exit 1
fi

if [[ -z $repository_name ]]
then
  print_error "'repository_name' variable must be set"
  exit 1
fi

if [[ -z $repository_url ]]
then
  print_error "'repository_url' variable must be set"
  exit 1
fi

readonly command="$1"

case "$command" in
  help \
  | init \
  | list \
  | add \
  | addcomm \
  | apply \
  | restore \
  | commit \
  | pull \
  | push \
  | status \
  | diff \
  | jump)
    shift
    $command "$@"
    ;;
  "")
    print_error "no operation specified (use 'help' for help)"
    ;;
  *)
    print_error "invalid operation -- '$1'"
    ;;
esac